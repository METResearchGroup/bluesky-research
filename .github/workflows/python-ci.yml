name: Python CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
    - uses: actions/checkout@v3
    - name: Cache Python packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-py-${{ matrix.python-version }}-${{ hashFiles('requirements.txt', 'dev_requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-py-${{ matrix.python-version }}-${{ hashFiles('requirements.txt', 'dev_requirements.txt') }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r dev_requirements.txt
        pip install -r ml_tooling/requirements.txt
        pip install -r ml_tooling/llm/requirements.txt
        # pip install -r search_engine/requirements.txt
        pip install -r ml_tooling/valence_classifier/requirements.txt
        pip install -r lib/telemetry/requirements.txt
    - name: Add project directory to PYTHONPATH
      run: echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV
    - name: Ruff linting
      run: |
        # stop the build if there are Python syntax errors or undefined names
        ruff check .
    - name: Test with pytest
      run: |
        pytest lib/tests
        pytest lib/db/tests
        pytest lib/db/sql/tests
        pytest lib/telemetry/tests
        pytest ml_tooling/llm/tests
        pytest ml_tooling/perspective_api/tests
        pytest ml_tooling/ime/tests
        pytest ml_tooling/valence_classifier/tests
        pytest services/backfill/core/tests
        pytest services/backfill/storage/tests
        pytest services/ml_inference/tests
        pytest services/ml_inference/perspective_api/tests
        pytest services/ml_inference/sociopolitical/tests
        pytest services/ml_inference/ime/tests
        pytest services/ml_inference/valence_classifier/tests
        pytest services/repartition_service/tests
        pytest services/calculate_analytics/tests
        pytest services/calculate_analytics/study_analytics/calculate_analytics/tests
        pytest services/write_cache_buffers_to_db/tests
        pytest services/sync/jetstream/tests
        pytest api/integrations_router/tests
        # pytest search_engine/tests
    - name: Lint Dockerfiles with Hadolint
      run: |
        docker run --rm -i hadolint/hadolint < Dockerfiles/add_users_to_study.Dockerfile
        docker run --rm -i hadolint/hadolint < Dockerfiles/feed_api.Dockerfile
        docker run --rm -i hadolint/hadolint < Dockerfiles/calculate_superposters.Dockerfile
        docker run --rm -i hadolint/hadolint < Dockerfiles/preprocess_raw_data.Dockerfile
        docker run --rm -i hadolint/hadolint < Dockerfiles/sync_firehose_stream.Dockerfile
        docker run --rm -i hadolint/hadolint < Dockerfiles/sync_most_liked_feed.Dockerfile
        docker run --rm -i hadolint/hadolint < Dockerfiles/ml_inference_perspective_api.Dockerfile

  frontend-lint:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'bluesky_database/frontend/') || contains(github.event.head_commit.added, 'bluesky_database/frontend/') || contains(github.event.head_commit.removed, 'bluesky_database/frontend/')
    defaults:
      run:
        working-directory: bluesky_database/frontend
    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: bluesky_database/frontend/package-lock.json
    - name: Install dependencies
      run: npm ci
    - name: Run ESLint
      run: npm run lint
    - name: Run TypeScript check
      run: npx tsc --noEmit
    - name: Build application
      run: npm run build
