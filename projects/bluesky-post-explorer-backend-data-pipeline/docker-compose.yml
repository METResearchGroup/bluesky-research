version: '3.8'

# Phase 1: Core Data Pipeline Services
# Services: Redis (Buffer), Data Writer, Jetstream (Firehose Connector)
# Architecture: Single-server MVP with proper service isolation and resource management

services:
  # Redis Buffer Service - High-throughput data buffering
  redis:
    image: redis:7.2-alpine
    container_name: bluesky-redis-buffer
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - bluesky_private
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-bluesky_buffer_2024}
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    labels:
      - "com.bluesky.service=redis"
      - "com.bluesky.phase=1"

  # Data Writer Service - Redis to Parquet conversion
  data-writer:
    build:
      context: ./services/data_writer
      dockerfile: Dockerfile
    container_name: bluesky-data-writer
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - parquet_storage:/data/parquet
      - ./config/data_writer:/app/config:ro
      - ./logs/data_writer:/app/logs
    networks:
      - bluesky_private
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-bluesky_buffer_2024}
      - PARQUET_STORAGE_PATH=/data/parquet
      - BATCH_PROCESSING_INTERVAL=300  # 5 minutes
      - LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    labels:
      - "com.bluesky.service=data-writer"
      - "com.bluesky.phase=1"

  # Jetstream Service - Bluesky Firehose Connector
  jetstream:
    build:
      context: ./services/jetstream
      dockerfile: Dockerfile
    container_name: bluesky-jetstream
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./config/jetstream:/app/config:ro
      - ./logs/jetstream:/app/logs
    networks:
      - bluesky_private
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-bluesky_buffer_2024}
      - BLUESKY_FIREHOSE_URL=${BLUESKY_FIREHOSE_URL}
      - BLUESKY_AUTH_TOKEN=${BLUESKY_AUTH_TOKEN}
      - LOG_LEVEL=INFO
      - BUFFER_KEY=firehose_buffer
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    labels:
      - "com.bluesky.service=jetstream"
      - "com.bluesky.phase=1"

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: bluesky-prometheus
    restart: unless-stopped
    depends_on:
      - redis
      - data-writer
      - jetstream
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    networks:
      - bluesky_private
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    labels:
      - "com.bluesky.service=monitoring"
      - "com.bluesky.phase=1"

  # Redis Exporter - Redis metrics for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: bluesky-redis-exporter
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-bluesky_buffer_2024}
    networks:
      - bluesky_private
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'
    labels:
      - "com.bluesky.service=monitoring"
      - "com.bluesky.phase=1"

# Networks
networks:
  bluesky_private:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: bluesky_private_net

# Volumes
volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/redis  # Mount to Hetzner SSD volume
  parquet_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/parquet  # Mount to Hetzner 500GB SSD volume
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/prometheus  # Mount to Hetzner SSD volume 