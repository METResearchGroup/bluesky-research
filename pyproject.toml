[project]
name = "bluesky-research"
version = "0.1.0"
description = "Bluesky Research"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "Mark Torres", email = "markptorres1@gmail.com"},
]
license = "MIT"

# Core dependencies - always installed
dependencies = [
    # Core web and data processing
    "flask>=3.0.2",
    "requests>=2.31.0",
    "pandas>=2.2.2",
    "numpy>=1.26.4",
    "python-dotenv>=1.0.1",
    
    # Database and storage
    "duckdb>=1.1.3",
    "peewee>=3.17.1",
    "aiosqlite>=0.21.0",
    "pyarrow>=17.0.0",
    
    # Cloud and external APIs
    "boto3>=1.40.11",
    "atproto>=0.0.61",
    
    # Visualization and utilities
    "matplotlib>=3.8.3",
    "click>=8.1.7",
    "memory-profiler>=0.60.0",
    
    # Standard dependencies
    "certifi>=2024.8.30",
    "charset-normalizer>=3.3.2",
    "idna>=3.8",
    "urllib3>=2.2.2",
    "packaging>=23.2",
    "typing-extensions>=4.12.2",
]

[project.optional-dependencies]
# Development tools
dev = [
    "pytest>=8.3.3",
    "pytest-env>=0.8.2",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.23.0",
    "ruff>=0.4.5",
    "autopep8>=2.1.0",
    "faker>=4.14.0",
    "pre-commit>=3.7.1",
]

# Machine Learning (heavy dependencies with PyTorch)
ml = [
    "torch>=2.5.1",
    "transformers>=4.44.2",
    "sentence-transformers>=2.6.1",
    "huggingface-hub>=0.27.1",
    "scikit-learn>=1.6.1",
    "scipy>=1.15.1",
    "tokenizers>=0.19.1",
]

# LLM and AI services (without heavy ML dependencies)
llm = [
    "openai>=1.55.3",
    "langchain>=0.1.7",
    "langchain-community>=0.0.20", 
    "langchain-core>=0.1.23",
    "tiktoken>=0.7.0",
    "litellm>=1.59.10",
    "google-generativeai>=0.5.0",
    "google-api-python-client>=2.116.0",
    "tenacity>=8.5.0,<9.0.0",  # Pin for langchain compatibility
    "opik>=1.4.8",
]

# Lightweight sentiment analysis
valence = [
    "vadersentiment>=3.3.2",
]

# Telemetry and monitoring
telemetry = [
    "wandb>=0.18.5",
    "comet-ml>=3.47.1",
    "sentry-sdk>=2.20.0",
    "prometheus-client>=0.19.0",
    "grafana-client>=4.3.2",
    "opentelemetry-api>=1.29.0",
]

# All optional dependencies for CI
all = [
    "bluesky-research[dev,ml,llm,valence,telemetry]"
]

[tool.setuptools.packages.find]
where = ["."]
include = ["lib*", "ml_tooling*", "bluesky_database*"]
exclude = [
    "demos*", 
    "experiments*", 
    "deprecated*", 
    "assets*", 
    "terraform*", 
    "projects*",
    "Dockerfiles*",
    "*.tests*",
    "tests*"
]

[tool.flake8]
exclude = ["*/experiments/*", "./demos/*"]
max-line-length = 80
max-complexity = 10

[tool.uv.workspace]
members = ["pipelines/get_existing_user_social_network"]

[tool.pytest.ini_options]
# Add custom markers
markers = [
    "integration: marks tests as integration tests",
    "slow: marks tests as slow running",
]

# Set environment variables for all tests
env = [
    "ENVIRONMENT=test",
    "RUN_MODE=test",
    "AWS_DEFAULT_REGION=us-east-1",
    "AWS_ACCESS_KEY_ID=testing",
    "AWS_SECRET_ACCESS_KEY=testing",
    "AWS_SECURITY_TOKEN=testing",
    "AWS_SESSION_TOKEN=testing",
    "GOOGLE_API_KEY=testing",
    "NYTIMES_KEY=testing",
    "HF_TOKEN=testing",
    "OPENAI_API_KEY=testing",
    "GOOGLE_AI_STUDIO_KEY=testing",
    "NEWSAPI_API_KEY=testing",
    "GROQ_API_KEY=testing",
    "MONGODB_URI=testing",
    "LANGTRACE_API_KEY=testing",
    "COMET_API_KEY=testing",
]

# Configure test collection
testpaths = [
    "lib/tests",
    "lib/db/tests", 
    "lib/db/sql/tests",
    "lib/telemetry/tests",
    "ml_tooling/ime/tests",
    "ml_tooling/llm/tests",
    "ml_tooling/perspective_api/tests",
    "services/backfill/posts/tests",
    "services/backfill/sync/tests",
    "services/ml_inference/tests",
    "services/ml_inference/ime/tests",
    "services/ml_inference/perspective_api/tests",
    "services/ml_inference/sociopolitical/tests",
    "services/get_preprocessed_posts_used_in_feeds/tests",
    "services/repartition_service/tests",
    "services/calculate_analytics/tests",
    "services/calculate_analytics/study_analytics/calculate_analytics/tests",
    "services/write_cache_buffers_to_db/tests",
    "services/sync/jetstream/tests",
    "pipelines/backfill_records_coordination/tests",
    "api/integrations_router/tests",
]

# Ignore certain directories
norecursedirs = [
    "experiments*",
    "*.egg",
    "build",
    "dist"
]

# Add command line default options
addopts = [
    "--verbose",
    "--no-header",
    "--ignore=experiments",
    "--tb=short",
    "--strict-markers",
]

# Configure pytest plugins
required_plugins = [
    "pytest-env",
    "pytest-mock"
]

# Fix asyncio fixture loop scope deprecation warning
asyncio_default_fixture_loop_scope = "function"
